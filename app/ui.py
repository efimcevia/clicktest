import streamlit as st
import json
from app import state, logic
from datetime import datetime

def add_step_form():
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥")

    with st.container():
        step_type = st.selectbox("–¢–∏–ø —à–∞–≥–∞", ["goto", "click", "fill"], key="step_type")
        selector = ""
        value = ""

        if step_type == "goto":
            value = st.text_input("URL", key="step_value")
        else:
            selector = st.text_input("CSS —Å–µ–ª–µ–∫—Ç–æ—Ä", key="step_selector")
            if step_type == "fill":
                value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ", key="step_value")

        if st.button("–î–æ–±–∞–≤–∏—Ç—å —à–∞–≥"):
            step = {"type": step_type}
            if selector:
                step["selector"] = selector
            if value:
                step["value"] = value
            state.add_step(step)
            st.success("–®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω")

def view_steps():
    st.subheader("üßæ –®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    steps = state.get_steps()

    if not steps:
        st.info("–®–∞–≥–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    for i, step in enumerate(steps, start=1):
        st.code(json.dumps(step, indent=2), language="json")

    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —à–∞–≥–∏"):
        state.clear_steps()
        st.success("–®–∞–≥–∏ –æ—á–∏—â–µ–Ω—ã")

def save_scenario_form():
    st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
    steps = state.get_steps()

    if not steps:
        st.info("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
        return

    name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", key="scenario_name_input")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"):
        if not name.strip():
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            return

        ok, err = logic.save_scenario(name.strip(), steps)
        if ok:
            st.success(f"–°—Ü–µ–Ω–∞—Ä–∏–π ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            state.clear_steps()
        else:
            st.error(err or "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")


def select_scenario():
    scenarios = logic.get_all_scenarios()
    names = [s.name for s in scenarios]
    selected_name = st.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–∏", ["<–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π>"] + names)

    if selected_name != "<–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π>":
        s = logic.get_scenario_by_name(selected_name)
        state.clear_steps()
        steps = json.loads(s.steps_json)
        for step in steps:
            state.add_step(step)
        return s
    return None